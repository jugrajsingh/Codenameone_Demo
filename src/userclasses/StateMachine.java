/**
 * Your application code goes here<br>
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */


package userclasses;

import ca.weblite.codename1.json.JSONArray;
import ca.weblite.codename1.json.JSONException;
import ca.weblite.codename1.json.JSONObject;
import com.codename1.components.InfiniteProgress;
import com.codename1.ext.codescan.CodeScanner;
import com.codename1.ext.codescan.ScanResult;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.NetworkManager;
import com.codename1.io.Preferences;
import com.codename1.io.Util;
import com.codename1.l10n.ParseException;
import com.codename1.l10n.SimpleDateFormat;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.ListModel;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.Resources;
import com.singhjugraj.demo.Server_APIs;
import generated.StateMachineBase;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Hashtable;

/**
 *
 * @author Your name here
 */
public class StateMachine extends StateMachineBase {
    public StateMachine(String resFile) {
        super(resFile);
        // do not modify, write code in initVars and initialize class members there,
        // the constructor might be invoked too late due to race conditions that might occur
    }
    
    /**
     * this method should be used to initialize variables instead of
     * the constructor/class scope to avoid race conditions
     */
    public void initVars(Resources res) {
    }

    @Override
    protected void beforeDataEntry(Form f) {
        List cmp = findList();
        final String[] responseString = {""};
        ConnectionRequest request = new ConnectionRequest() {
            @Override
            protected void readResponse(InputStream input) throws IOException {
                responseString[0] = Util.readToString(input);
            }
        };
        request.setPost(false);
        request.setUrl(Server_APIs.USERDATA);
        request.addArgument("user", Server_APIs.USERNAME);
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dig = ip.showInifiniteBlocking();
        request.setDisposeOnCompletion(dig);
        NetworkManager.getInstance().addToQueueAndWait(request);
        int reqcode = request.getResponseCode();
        if (reqcode == 200) {
            ArrayList<Hashtable<String, String>> a = new ArrayList<>();
            try {
                JSONArray jArray = new JSONArray(responseString[0]);
                if (jArray.length() > 0) {
                    JSONObject obj = jArray.getJSONObject(0);
                    if (!obj.getString("user_data").equals("null")) {
                        JSONArray jsonArray = new JSONArray(obj.getString("user_data"));
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject object = jsonArray.getJSONObject(i);
                            Hashtable<String, String> h = new Hashtable<>();
                            h.put("type", object.getString("type"));
                            h.put("data", object.getString("data"));
                            a.add(h);
                            cmp.setModel(new DefaultListModel<>(a));
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        cmp.addPullToRefresh(() -> {
            beforeDataEntry(f);
            f.revalidate();
        });
    }

    @Override
    protected void beforeOwnerDetails(Form f) {
        final String[] responseString = new String[1];
        Picker picker = findDatePicker();
        picker.setType(Display.PICKER_TYPE_DATE);
        picker.setFormatter(new SimpleDateFormat("yyyy-MM-dd"));
        ConnectionRequest request = new ConnectionRequest() {
            @Override
            protected void readResponse(InputStream input) throws IOException {
                responseString[0] = Util.readToString(input);
            }
        };
        request.setUrl(Server_APIs.USERDETAILS);
        request.setPost(false);
        request.addArgument("user", Server_APIs.USERNAME);
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dig = ip.showInifiniteBlocking();
        request.setDisposeOnCompletion(dig);
        NetworkManager.getInstance().addToQueueAndWait(request);
        if (request.getResponseCode() == 200) {
            try {
                JSONArray jArray = new JSONArray(responseString[0]);
                JSONObject jsonObject = jArray.getJSONObject(0);
                findFirstName().setText(jsonObject.getString("firstname"));
                findLastName().setText(jsonObject.getString("lastname"));
                findUsername().setText(jsonObject.getString("username"));
                findPassword().setText(jsonObject.getString("password"));
                findRepassword().setText(jsonObject.getString("password"));
                findEmail().setText(jsonObject.getString("email"));
                if (jsonObject.getString("gender").equalsIgnoreCase("male")) {
                    findMale().setSelected(true);
                } else {
                    findFemale().setSelected(true);
                }
                findComments().setText(jsonObject.getString("comments"));
                findDatePicker().setDate(new SimpleDateFormat("yyyy-MM-dd").parse(jsonObject.getString("dateofbirth")));
            } catch (JSONException | ParseException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    protected void onDataEntry_NewEntryButtonAction(Component c, ActionEvent event) {
        Dialog dialog = new Dialog();
        dialog.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        Label labelenter = new Label("Enter Label");
        Label labeldata = new Label("Enter Data ");
        TextField enterLabel = new TextField();
        enterLabel.setHint("Please Specify Label");
        enterLabel.setColumns(45);
        TextField enterData = new TextField();
        enterData.setHint("Please Enter Data");
        enterData.setColumns(45);
        Button okButtonNewEntry = new Button("Ok");
        Container container1 = new Container();
        container1.setLayout(new BoxLayout(BoxLayout.X_AXIS));
        container1.add(labelenter);
        container1.add(enterLabel);
        Container container2 = new Container();
        container2.setLayout(new BoxLayout(BoxLayout.X_AXIS));
        container2.add(labeldata);
        container2.add(enterData);
        dialog.add(container1);
        dialog.add(container2);
        dialog.add(okButtonNewEntry);
        okButtonNewEntry.addActionListener(evt -> {
            List list = findList(c);
            ListModel model = list.getModel();
            Hashtable<String, String> hashtable = new Hashtable<>();
            hashtable.put("type", enterLabel.getText());
            hashtable.put("data", enterData.getText());
            model.addItem(hashtable);
            dialog.dispose();
        });
        dialog.setDisposeWhenPointerOutOfBounds(true);
        dialog.show();
    }

    @Override
    protected void onOwnerDetails_SubmitAction(Component c, ActionEvent event) {
        String requestBody;
        try {
            requestBody = "newusername=" + findUsername().getText();
            requestBody = requestBody + "&password=" + findPassword().getText();
            requestBody = requestBody + "&dob=" + findDatePicker().getText();
            requestBody = requestBody + "&email=" + findEmail().getText();
            requestBody = requestBody + "&firstname=" + findFirstName().getText();
            requestBody = requestBody + "&lastname=" + findLastName().getText();
            requestBody = requestBody + "&comments=" + findComments().getText();
            String gender;
            if (findMale().isSelected()) {
                gender = "male";
            } else {
                gender = "female";
            }
            requestBody = requestBody + "&gender=" + gender;
            String finalRequestBody = requestBody;
            ConnectionRequest request = new ConnectionRequest() {
                @Override
                protected void buildRequestBody(OutputStream os) throws IOException {
                    os.write(finalRequestBody.getBytes());
                }
            };
            request.setUrl(Server_APIs.USERDETAILS + "?user=" + Server_APIs.USERNAME);
            request.setContentType("application/x-www-form-urlencoded");
            request.setPost(true);
            InfiniteProgress ip = new InfiniteProgress();
            Dialog dig = ip.showInifiniteBlocking();
            request.setDisposeOnCompletion(dig);
            NetworkManager.getInstance().addToQueueAndWait(request);
            request.getResponseCode();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void onDataEntry_SaveButtonAction(Component c, ActionEvent event) {
        List list = findList(c);
        Hashtable hashtable;
        JSONArray array = new JSONArray();
        ListModel model = list.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            hashtable = (Hashtable) model.getItemAt(i);
            JSONObject object = new JSONObject();
            try {
                object.put("type", hashtable.get("type"));
                object.put("data", hashtable.get("data"));
                array.put(object);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        ConnectionRequest request = new ConnectionRequest() {
            @Override
            protected void buildRequestBody(OutputStream os) throws IOException {
                String send = "data=" + array.toString();
                os.write(send.getBytes());
            }
        };
        request.setUrl(Server_APIs.USERDATA + "?user=" + Server_APIs.USERNAME);
        request.setPost(true);
        request.setContentType("application/x-www-form-urlencoded");
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dig = ip.showInifiniteBlocking();
        request.setDisposeOnCompletion(dig);
        NetworkManager.getInstance().addToQueueAndWait(request);
    }

    @Override
    protected void onLoginForm_LoginSubmitAction(Component c, ActionEvent event) {
        boolean empty = false;
        if (!empty) {
            final String[] responseString = new String[1];
            String username = findLoginUsername().getText();
            String password = findLoginPassword().getText();
            ConnectionRequest request = new ConnectionRequest() {
                @Override
                protected void buildRequestBody(OutputStream os) throws IOException {
                    String send = "user=" + username + "&password=" + password;
                    os.write(send.getBytes());
                }

                @Override
                protected void readResponse(InputStream input) throws IOException {
                    responseString[0] = Util.readToString(input);
                }
            };
            request.setUrl(Server_APIs.LOGIN);
            request.setPost(true);
            request.setContentType("application/x-www-form-urlencoded");
            InfiniteProgress ip = new InfiniteProgress();
            Dialog dig = ip.showInifiniteBlocking();
            request.setDisposeOnCompletion(dig);
            NetworkManager.getInstance().addToQueueAndWait(request);
            if (request.getResponseCode() == 200) {
                try {
                    JSONArray jArray = new JSONArray(responseString[0]);
                    if (jArray.length() == 1) {
                        JSONObject obj = jArray.getJSONObject(0);
                        Preferences.set("username", obj.getString("username"));
                        Server_APIs.USERNAME = username;
                        showForm("Main", null);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Override
    protected void onLoginForm_SignupSubmitAction(Component c, ActionEvent event) {
        boolean empty = false;
        if (!empty) {
            final String[] responseString = new String[1];
            String username = findSignupUsername().getText();
            String password = findSignupPassword().getText();
            String email = findSignupEmail().getText();
            String fname = findSignupFirstname().getText();
            String lname = findSignupLastname().getText();
            String date = findSignupdatePicker().getText();
            String gender;
            if (findSignupmale().isSelected()) {
                gender = "male";
            } else {
                gender = "female";
            }
            boolean available = false;
            ConnectionRequest request = new ConnectionRequest() {
                @Override
                protected void buildRequestBody(OutputStream os) throws IOException {
                    String send = "user=" + username + "&password=" + password;
                    os.write(send.getBytes());
                }

                @Override
                protected void readResponse(InputStream input) throws IOException {
                    responseString[0] = Util.readToString(input);
                }
            };
            request.setUrl(Server_APIs.LOGIN);
            request.setPost(true);
            request.setContentType("application/x-www-form-urlencoded");
            InfiniteProgress ip = new InfiniteProgress();
            Dialog dig = ip.showInifiniteBlocking();
            request.setDisposeOnCompletion(dig);
            NetworkManager.getInstance().addToQueueAndWait(request);
            if (request.getResponseCode() == 200) {
                try {
                    JSONArray jArray = new JSONArray(responseString[0]);
                    if (jArray.length() == 0) {
                        available = true;
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            if (available) {
                ConnectionRequest connectionRequest = new ConnectionRequest() {
                    @Override
                    protected void buildRequestBody(OutputStream os) throws IOException {
                        String send = "user=" + username +
                                "&password=" + password +
                                "&email=" + email +
                                "&firstname=" + fname +
                                "&lastname=" + lname +
                                "&dateofbirth=" + date +
                                "&gender=" + gender;
                        os.write(send.getBytes());
                    }

                    @Override
                    protected void readResponse(InputStream input) throws IOException {
                        responseString[0] = Util.readToString(input);
                    }
                };
                connectionRequest.setUrl(Server_APIs.NEWUSER);
                connectionRequest.setContentType("application/x-www-form-urlencoded");
                connectionRequest.setPost(true);
                InfiniteProgress infiniteProgress = new InfiniteProgress();
                Dialog dialog = infiniteProgress.showInifiniteBlocking();
                connectionRequest.setDisposeOnCompletion(dialog);
                NetworkManager.getInstance().addToQueueAndWait(connectionRequest);
                if (connectionRequest.getResponseCode() == 200) {
                    try {
                        JSONObject jobj = new JSONObject(responseString[0]);
                        if (jobj.getString("affected_rows").equals(Integer.toString(1))) {
                            ConnectionRequest rquest = new ConnectionRequest();
                            rquest.setPost(false);
                            rquest.setUrl(Server_APIs.INITIATE);
                            rquest.addArgument("user", username);
                            InfiniteProgress p = new InfiniteProgress();
                            Dialog ig = p.showInifiniteBlocking();
                            rquest.setDisposeOnCompletion(ig);
                            NetworkManager.getInstance().addToQueueAndWait(rquest);
                            Preferences.set("username", username);
                            Server_APIs.USERNAME = username;
                            showForm("Main", null);
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            } else {
                Dialog dialog = new Dialog();
                dialog.add("Username not available");
                dialog.setDialogType(Dialog.TYPE_ERROR);
                dialog.setDisposeWhenPointerOutOfBounds(true);
                dialog.show();
            }
        }
    }

    @Override
    protected void postLoginForm(Form f) {
        Picker picker = findSignupdatePicker();
        picker.setType(Display.PICKER_TYPE_DATE);
        picker.setFormatter(new SimpleDateFormat("yyyy-MM-dd"));
    }

    @Override
    protected void onMain_ScanitAction(Component c, ActionEvent event) {
        CodeScanner.getInstance().scanQRCode(new ScanResult() {

            @Override
            public void scanCompleted(String s, String s1, byte[] bytes) {
                Server_APIs.SCANNEDUSER = s;
                showForm("ScannedUser", null);
            }

            @Override
            public void scanCanceled() {
                Dialog dialog = new Dialog();
                dialog.add("SCAN FAILED or CANCELED");
                dialog.setDialogType(Dialog.TYPE_ERROR);
                dialog.setDisposeWhenPointerOutOfBounds(true);
                dialog.show();
            }

            @Override
            public void scanError(int i, String s) {

            }
        });
    }

    @Override
    protected void beforeScannedUser(Form f) {
        List cmp = findScannedUserList();
        final String[] responseString = {""};
        ConnectionRequest request = new ConnectionRequest() {
            @Override
            protected void readResponse(InputStream input) throws IOException {
                responseString[0] = Util.readToString(input);
            }
        };
        request.setPost(false);
        request.setUrl(Server_APIs.USERDATA);
        request.addArgument("user", Server_APIs.SCANNEDUSER);
        InfiniteProgress ip = new InfiniteProgress();
        Dialog dig = ip.showInifiniteBlocking();
        request.setDisposeOnCompletion(dig);
        NetworkManager.getInstance().addToQueueAndWait(request);
        if (request.getResponseCode() == 200) {
            ArrayList<Hashtable<String, String>> a = new ArrayList<>();
            try {
                JSONArray jArray = new JSONArray(responseString[0]);
                if (jArray.length() > 0) {
                    JSONObject obj = jArray.getJSONObject(0);
                    if (!obj.getString("user_data").equals("null")) {
                        JSONArray jsonArray = new JSONArray(obj.getString("user_data"));
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject object = jsonArray.getJSONObject(i);
                            Hashtable<String, String> h = new Hashtable<>();
                            h.put("type", object.getString("type"));
                            h.put("data", object.getString("data"));
                            a.add(h);
                            cmp.setModel(new DefaultListModel<>(a));
                        }
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        cmp.addPullToRefresh(() -> {
            beforeScannedUser(f);
            f.revalidate();
        });
    }
}
